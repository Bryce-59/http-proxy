#!/usr/bin/env python3
import sys
import threading
from threading import Thread
import socket
from socket import *

# messages from server -> proxy -> client (browser)
def sendResponses(proxyClientSocket, realClientSocket):
    while True:
        #rcv a message
        packet = proxyClientSocket.recv(2048)
        #TODO: edit header
    
        #pass to real client
        realClientSocket.send(packet)
    

# messages from client (browser) -> proxy -> server
def handleRequests(clientSocket):
    while True:
        clientRequest = clientSocket.recv(2048)
        if clientRequest:
            temp = clientRequest.rstrip()
            data = temp.decode('utf-8')
            
            line_set = data.splitlines()
            print(line_set[0])

            for line in line_set:
                temp2 = line.lstrip()
                if temp2[:4].lower() == 'host':
                    hostAddress = line[line.find(':') + 1:].lstrip().rstrip()
                    break
            hostPort = 80 #TODO: parse for port number
            host = True

            serverSocket = socket(AF_INET, SOCK_STREAM)
            serverSocket.connect((hostAddress, hostPort))
            
            serverThread = threading.Thread(target=sendResponses, args=(serverSocket,clientSocket), daemon=True)
            serverThread.start()
            
            serverSocket.send(clientRequest)

def findClients(proxySocket):
    
    proxySocket.listen()
    while True:
        clientSocket, clientAddress = proxySocket.accept()
        
        clientThread = Thread(target=handleRequests, args=(clientSocket,), daemon=True)
        clientThread.start()

if __name__ == '__main__':   
    # serverPort = int(sys.argv[1])
    serverPort = 36784

    # proxy server:
    proxySocket = socket(AF_INET, SOCK_STREAM)
    proxySocket.bind((b'0.0.0.0', serverPort))

    proxyThread = threading.Thread(target=findClients, args=(proxySocket,), daemon=True)
    proxyThread.start()
    
    while True:
        text = sys.stdin.readline()
        if (not text or (text == "q\n" and sys.stdin.isatty())):
            break
    proxySocket.close()